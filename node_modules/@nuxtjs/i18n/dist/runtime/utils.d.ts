import { type SwitchLocalePathIntercepter, type BaseUrlResolveHandler, type LocaleObject } from '#build/i18n.options.mjs';
import type { I18n, Locale, Composer, VueI18n } from 'vue-i18n';
import type { NuxtApp } from '#app';
import type { Router } from '#vue-router';
import type { DetectLocaleContext } from './internal';
import type { HeadSafe } from '@unhead/vue';
import type { createLocaleFromRouteGetter } from './routing/extends/router';
import type { RouteLocationNormalized, RouteLocationNormalizedLoaded } from 'vue-router';
import type { RuntimeConfig } from '@nuxt/schema';
export declare function _setLocale(i18n: I18n, locale: Locale): any;
export declare function setCookieLocale(i18n: I18n, locale: Locale): any;
export declare function setLocaleMessage(i18n: I18n, locale: Locale, messages: Record<string, any>): any;
export declare function mergeLocaleMessage(i18n: I18n, locale: Locale, messages: Record<string, any>): any;
export declare function onLanguageSwitched(i18n: I18n, oldLocale: string, newLocale: string): void;
export declare function finalizePendingLocaleChange(i18n: I18n): Promise<any>;
/**
 * Common options used internally by composable functions, these
 * are initialized when calling a wrapped composable function.
 *
 * @internal
 */
export type CommonComposableOptions = {
    router: Router;
    i18n: I18n;
    runtimeConfig: RuntimeConfig;
};
export declare function initCommonComposableOptions(i18n?: I18n): CommonComposableOptions;
export declare function loadAndSetLocale(newLocale: string, i18n: I18n, initial?: boolean): Promise<[boolean, string]>;
type LocaleLoader = () => Locale;
export declare function detectLocale(route: string | RouteLocationNormalized | RouteLocationNormalizedLoaded, routeLocaleGetter: ReturnType<typeof createLocaleFromRouteGetter>, vueI18nOptionsLocale: Locale | undefined, initialLocaleLoader: Locale | LocaleLoader, detectLocaleContext: DetectLocaleContext): string;
export declare function detectRedirect({ route, targetLocale, routeLocaleGetter, calledWithRouting }: {
    route: {
        to: RouteLocationNormalized | RouteLocationNormalizedLoaded;
        from?: RouteLocationNormalized | RouteLocationNormalizedLoaded;
    };
    targetLocale: Locale;
    routeLocaleGetter: ReturnType<typeof createLocaleFromRouteGetter>;
    calledWithRouting?: boolean;
}): string;
type NavigateArgs = {
    i18n: I18n;
    redirectPath: string;
    locale: string;
    route: RouteLocationNormalized | RouteLocationNormalizedLoaded;
};
export declare function navigate(args: NavigateArgs, { status, enableNavigate }?: {
    status?: number;
    enableNavigate?: boolean;
}): Promise<any>;
export declare function injectNuxtHelpers(nuxt: NuxtApp, i18n: I18n | VueI18n | Composer): void;
export declare function extendPrefixable(): (opts: PrefixableOptions) => boolean;
export declare function extendSwitchLocalePathIntercepter(): SwitchLocalePathIntercepter;
export declare function extendBaseUrl(): BaseUrlResolveHandler<NuxtApp>;
export type HeadParam = Required<Pick<HeadSafe, 'meta' | 'link'>>;
export declare function getNormalizedLocales(locales: string[] | LocaleObject[]): LocaleObject[];
export {};
